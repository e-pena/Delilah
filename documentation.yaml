openapi: 3.0.0

info:
  title: Delilah Resto
  description: Plataforma de pedidos de comida
  version: 1.0.0
  contact:
    name: EMP
    url: https://delilah-resto.com/support
    email: admin@delilah.com

tags:
  - name: Admin
    description: Acceso para el administrador
    externalDocs:
      description: Mira más en
      url: http://github.com/e-pena/Delilah
  - name: Usuario
    description: Acceso para el usuario

paths:
  /usuario:
    get:
      tags:
        - Admin
      summary: 'Muestra el listado de usuarios registrados'
      responses:
        200:
          description: 'Operación exitosa'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        405:
          description: 'Datos inválidos'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Admin
      summary: 'Agrega un usuario a la base de datos'
      responses:
        201:
          description: 'Creado exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /usuario/{usuarioId}:
    get:
      tags:
        - Admin
      summary: 'Muestra el usuario por id'
      parameters:
        - name: usuarioId
          in: path
          description: 'Usuario a conocer'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Operación exitosa'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        400:
          description: 'Id inválido'
        404:
          description: 'Usuario no encontrado'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Admin
      summary: 'Modifica un usuario existente'
      parameters:
        - name: usuarioId
          in: path
          description: 'Usuario a modificar'
          required: true
          schema:
            type: integer
      responses:
        201:
          description: 'Creado exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        400:
          description: 'Id inválido'
        404:
          description: 'Usuario no encontrado'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Admin
      summary: 'Elimina un usuario'
      parameters:
        - name: token_admin
          in: header
          required: true
          schema:
            type: string
        - name: usuarioId
          in: path
          description: 'Usuario a eliminar'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Operación exitosa'
        400:
          description: 'Id inválido'
        404:
          description: 'Usuario no encontrado'

  /productos:
    get:
      tags:
        - Usuario
        - Admin
      summary: 'Muestra el listado de productos disponibles'
      responses:
        200:
          description: 'Operación exitosa'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        405:
          description: 'Datos inválidos'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Admin
      summary: 'Agrega un producto a la base de datos'
      responses:
        201:
          description: 'Creado exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /productos/{productoId}:
    get:
      tags:
        - Usuario
        - Admin
      summary: 'Muestra el producto por id'
      parameters:
        - name: productoId
          in: path
          description: 'Producto a conocer'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Operación exitosa'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        400:
          description: 'Id inválido'
        404:
          description: 'Producto no encontrado'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Admin
      summary: 'Modifica un producto existente'
      parameters:
        - name: productoId
          in: path
          description: 'Producto a modificar'
          required: true
          schema:
            type: integer
      responses:
        201:
          description: 'Creado exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        400:
          description: 'Id inválido'
        404:
          description: 'Producto no encontrado'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Admin
      summary: 'Elimina un producto'
      parameters:
        - name: token_admin
          in: header
          required: true
          schema:
            type: string
        - name: productoId
          in: path
          description: 'Producto a eliminar'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Operación exitosa'
        400:
          description: 'Id inválido'
        404:
          description: 'Producto no encontrado'

  /pedidos:
    get:
      tags:
        - Admin
      summary: 'Muestra el listado de pedidos en curso'
      parameters:
        - name: token_admin
          in: header
          required: true
          schema:
            type: string
        - name: productoId
          in: path
          description: 'Producto a eliminar'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Operación exitosa'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
        405:
          description: 'Datos inválidos'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Admin
        - Usuario
      summary: 'Realiza un nuevo pedido'
      responses:
        201:
          description: 'Creado exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pedidos/{pedidoId}:
    get:
      tags:
        - Admin
      summary: 'Muestra el pedido por id'
      parameters:
        - name: token_admin
          in: header
          required: true
          schema:
            type: string
        - name: pedidoId
          in: path
          description: 'Pedido a conocer'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Operación exitosa'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
        400:
          description: 'Id inválido'
        404:
          description: 'Pedido no encontrado'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Admin
        - Usuario
      summary: 'Modifica un pedido existente'
      parameters:
        - name: pedidoId
          in: path
          description: 'Pedido a modificar'
          required: true
          schema:
            type: integer
      responses:
        201:
          description: 'Creado exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
        400:
          description: 'Id inválido'
        404:
          description: 'Pedido no encontrado'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Admin
      summary: 'Elimina un pedido'
      parameters:
        - name: token_admin
          in: header
          required: true
          schema:
            type: string
        - name: pedidoId
          in: path
          description: 'Pedido a eliminar'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Operación exitosa'
        400:
          description: 'Id inválido'
        404:
          description: 'Producto no encontrado'

components:
  schemas:
    Usuario:
      type: object
      properties:
        id:
          type: integer
          description: 'Identificación única'
          example: 1
        username:
          type: string
          description: 'Nombre de usuario'
          example: 'fmercury'
        nombre_completo:
          type: string
          description: 'Nombre y apellido'
          example: 'Freddie Mercury'
        email:
          type: string
          description: 'Email'
          example: 'fmer@mimail.com'
        direccion:
          type: string
          description: 'Dirección de entrega'
          example: 'Rivadavia 6000 1ro A'
        telefono:
          type: string
          description: 'Número de teléfono'
          example: '4444-4444'
        password:
          type: string
          description: 'Contraseña del usuario'
          example: 'passWorD'
        id_favoritos:
          type: array
          description: 'Identificación de los productos favoritos'
          example: [1, 4, 14]
          items:
            type: integer
      required:
        - id
        - username
        - nombre_completo
        - email
        - direccion
        - telefono
        - password
    Pedido:
      type: object
      properties:
        id:
          type: integer
          description: 'Identificación única'
          example: 1
        estado:
          type: string
          description: 'Estado del pedido'
          example: 'Confirmado'
        hora:
          type: string
          description: 'Hora en la que se realizó el pedido'
          example: '11.24 PM'
        descripcion:
          type: string
          description: 'Contenido del pedido'
          example: '2x Hamburguesa doble 1x Gaseosa'
        pago:
          type: string
          description: 'Forma de pago'
          example: 'Efectivo'
        costo:
          type: integer
          description: 'Monto a abonar'
          example: 1000
        id_usuario:
          type: integer
          description: 'Id del usuario que realizó el pedido'
          example: '3'
        direccion:
          type: string
          description: 'Dirección de entrega'
          example: 'Rivadavia 6000'
      required:
        - id
        - estado
        - hora
        - descripcion
        - pago
        - costo
        - id_usuario
        - direccion
    Producto:
      type: object
      properties:
        id:
          type: integer
          description: 'Identificación única'
          example: 1
        titulo:
          type: string
          description: 'Nombre del producto'
          example: 'Hamburguesa doble'
        precio:
          type: integer
          description: 'Precio del producto'
          example: '$400'
      required:
        - id
        - titulo
        - precio
    Error:
      type: object
      properties:
        message:
          type: string
