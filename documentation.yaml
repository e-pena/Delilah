openapi: 3.0.0

info:
  title: Delilah Resto
  description: Plataforma de pedidos de comida
  version: 1.0.0

tags:
  - name: Admin
    description: Acceso para el administrador
    externalDocs:
      description: Mira más en
      url: http://github.com/e-pena/Delilah
  - name: Usuario
    description: Acceso para el usuario

paths:
  /register:
    post:
      tags:
        - Admin
        - Usuario
      summary: 'Registra un nuevo usuario o administrador'
      responses:
        201:
          description: 'Registro realizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        400:
          description: 'Información incompleta'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: 'El username ya existe'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                type: string
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'Nombre de usuario'
                  example: 'jperez'
                nombre_completo:
                  type: string
                  description: 'Nombre y apellido'
                  example: 'Juan Perez'
                email:
                  type: string
                  description: 'Email'
                  example: 'jperez@mimail.com'
                direccion:
                  type: string
                  description: 'Dirección de entrega'
                  example: 'Rivadavia 6000 1ro A'
                telefono:
                  type: string
                  description: 'Número de teléfono'
                  example: '4444-4444'
                contrasenia:
                  type: string
                  description: 'Contraseña del usuario'
                  example: 'passWorD'
                permisos_id:
                  type: integer
                  description: 'Permisos de usuario o administrador'
                  example: 1
              required:
                - username
                - nombre_completo
                - email
                - direccion
                - telefono
                - contrasenia
                - permisos_id
  /login:
    post:
      tags:
        - Admin
        - Usuario
      summary: 'Loguea un usuario o administrador'
      responses:
        200:
          description: 'Login realizado'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          description: 'Contraseña incorrecta'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'No se encontró usuario'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'Nombre de usuario'
                  example: 'jperez'
                contrasenia:
                  type: string
                  description: 'Contraseña del usuario'
                  example: 'passWorD'
              required:
                - username
                - contrasenia
  /usuarios:
    get:
      tags:
        - Admin
      summary: 'Muestra el listado de usuarios registrados'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Operación exitosa'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        403:
          description: 'Sin permisos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /usuarios/{usuarioId}:
    get:
      tags:
        - Admin
        - Usuario
      summary: 'Muestra el usuario por id'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: usuarioId
          in: path
          description: 'Usuario a conocer'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Operación exitosa'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        403:
          description: 'Sin permisos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Admin
        - Usuario
      summary: 'Modifica un usuario existente'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: usuarioId
          in: path
          description: 'Usuario a modificar'
          required: true
          schema:
            type: integer
      responses:
        201:
          description: 'Creado exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        403:
          description: 'Sin permisos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre_completo:
                  type: string
                  description: 'Nombre y apellido'
                  example: 'Juan Perez'
                email:
                  type: string
                  description: 'Email'
                  example: 'jperez@mimail.com'
                direccion:
                  type: string
                  description: 'Dirección de entrega'
                  example: 'Rivadavia 6000 1ro A'
                telefono:
                  type: string
                  description: 'Número de teléfono'
                  example: '4444-4444'
                contrasenia:
                  type: string
                  description: 'Contraseña del usuario'
                  example: 'passWorD'
              required:
                - nombre_completo
                - email
                - direccion
                - telefono
                - contrasenia
    delete:
      tags:
        - Admin
        - Usuario
      summary: 'Elimina un usuario'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: usuarioId
          in: path
          description: 'Usuario a eliminar'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Usuario borrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        403:
          description: 'Sin permisos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /usuarios/{usuarioId}/pedidos:
    get:
      tags:
        - Admin
        - Usuario
      summary: 'Muestra pedidos de un usuario'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: usuarioId
          in: path
          description: 'Usuario cuyos pedidos se quieren conocer'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Operación exitosa'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
        403:
          description: 'Sin permisos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Usuario no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Usuario
      summary: 'Crea un pedido nuevo'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: usuarioId
          in: path
          description: 'Usuario que realiza el pedido nuevo'
          required: true
          schema:
            type: integer
      responses:
        201:
          description: 'Pedido creado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
        403:
          description: 'Sin permisos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                estado_id:
                  type: integer
                  description: 'Id del estado del pedido'
                  example: 1
                idProductos:
                  type: array
                  description: 'Id de productos'
                  items:
                    type: integer
                  example: 'jperez@mimail.com'
                pago_id:
                  type: integer
                  description: 'Id de forma de pago'
                  example: 1

  /productos:
    get:
      tags:
        - Usuario
        - Admin
      summary: 'Muestra el listado de productos disponibles'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Operación exitosa'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        403:
          description: 'Sin permisos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Admin
      summary: 'Agrega un producto'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      responses:
        201:
          description: 'Creado exitosamente'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        403:
          description: 'Sin permisos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                titulo:
                  type: string
                  description: 'Título del producto'
                  example: 1
                precio:
                  type: integer
                  description: 'Precio del producto'
                  example: 300

  /productos/{productoId}:
    get:
      tags:
        - Usuario
        - Admin
      summary: 'Muestra el producto por id'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: productoId
          in: path
          description: 'Producto a conocer'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Operación exitosa'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        404:
          description: 'Producto no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Admin
      summary: 'Modifica un producto existente'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: productoId
          in: path
          description: 'Producto a modificar'
          required: true
          schema:
            type: integer
      responses:
        201:
          description: 'Producto modificado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        403:
          description: 'Sin permisos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Producto no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                titulo:
                  type: string
                  description: 'Título del producto'
                  example: 1
                precio:
                  type: integer
                  description: 'Precio del producto'
                  example: 300
    delete:
      tags:
        - Admin
      summary: 'Elimina un producto'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: productoId
          in: path
          description: 'Producto a eliminar'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Producto borrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        403:
          description: 'Sin permisos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Producto no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pedidos:
    get:
      tags:
        - Admin
      summary: 'Muestra el listado de pedidos en curso'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Operación exitosa'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
        403:
          description: 'Sin permisos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pedidos/{pedidoId}:
    delete:
      tags:
        - Admin
      summary: 'Elimina un pedido'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: pedidoId
          in: path
          description: 'Pedido a eliminar'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Operación exitosa'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
        403:
          description: 'Sin permisos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Pedido no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Admin
      summary: 'Modifica el estado de un pedido'
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: pedidoId
          in: path
          description: 'Pedido a modificar'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Operación exitosa'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
        403:
          description: 'Sin permisos'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Pedido no encontrado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                estado_id:
                  type: integer
                  description: 'Id del estado del pedido'
                  example: 5

components:
  schemas:
    Usuario:
      type: object
      properties:
        username:
          type: string
          description: 'Nombre de usuario'
          example: 'jperez'
        nombre_completo:
          type: string
          description: 'Nombre y apellido'
          example: 'Juan Perez'
        email:
          type: string
          description: 'Email'
          example: 'jperez@mimail.com'
        direccion:
          type: string
          description: 'Dirección de entrega'
          example: 'Rivadavia 6000 1ro A'
        telefono:
          type: string
          description: 'Número de teléfono'
          example: '4444-4444'
        contrasenia:
          type: string
          description: 'Contraseña del usuario'
          example: 'passWorD'
        permisos_id:
          type: integer
          description: 'Permisos de usuario o administrador'
          example: 1
      required:
        - username
        - nombre_completo
        - email
        - direccion
        - telefono
        - contrasenia
        - permisos_id
    Pedido:
      type: object
      properties:
        id:
          type: integer
          description: 'Identificación única'
          example: 1
        descripcion:
          type: string
          description: 'Contenido del pedido'
          example: '2x Hamburguesa doble 1x Gaseosa'
        hora:
          type: string
          description: 'Hora en la que se realizó el pedido'
          example: '11.24 PM'
        costo:
          type: integer
          description: 'Monto a abonar'
          example: 1000
        estado:
          type: string
          description: 'Estado del pedido'
          example: 'Nuevo'
        forma_pago:
          type: string
          description: 'Forma de pago'
          example: 'Efectivo'
        usuario_id:
          type: integer
          description: 'Id del usuario que realizó el pedido'
          example: 3
        datosProducto:
          type: array
          description: 'Detalle de los productos'
          items:
            type: object
            properties:
              producto_id:
                type: integer
                description: 'Id del producto'
                example: 3
              titulo:
                type: string
                description: 'Título del producto'
                example: 'Hamburguesa'
              precio:
                type: integer
                description: 'Precio del producto'
                example: 500
              pedido_id:
                type: integer
                description: 'Id del pedido'
                example: 3
            required:
              - id
              - descripcion
              - hora
              - costo
      required:
        - id
        - descripcion
        - hora
        - costo
        - estado
        - forma_pago
        - usuario_id
    Producto:
      type: object
      properties:
        id:
          type: integer
          description: 'Identificación única'
          example: 1
        titulo:
          type: string
          description: 'Nombre del producto'
          example: 'Hamburguesa doble'
        precio:
          type: integer
          description: 'Precio del producto'
          example: 400
      required:
        - id
        - titulo
        - precio
    Error:
      type: object
      properties:
        message:
          type: string
